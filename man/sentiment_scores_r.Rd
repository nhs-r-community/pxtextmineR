% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sentiment_scores_r.R
\name{sentiment_scores_r}
\alias{sentiment_scores_r}
\title{Sentiment analysis with Python packages}
\usage{
sentiment_scores_r(x)
}
\arguments{
\item{x}{Data frame. The text to run sentiment analysis on.}
}
\value{
Data frame. All indicators produced by \code{TextBlob} (polarity and
subjectivity) and \code{vaderSentiment} (positive, negative and neutral
sentiments, and compound score).
}
\description{
Calculate sentiment indicators from
\href{https://textblob.readthedocs.io/en/dev/}{\code{TextBlob}} and
\href{https://pypi.org/project/vaderSentiment/}{\code{vaderSentiment}}.
}
\details{
This function complements existing sentiment analysis packages in R
(e.g. \code{tidytext}or \code{quanteda.sentiment}) with the popular Python
sentiment analysis libraries \code{TextBlob} and \code{vaderSentiment}.\cr\cr
\code{TextBlob} calculates two indicators, namely \emph{polarity} and
\emph{subjectivity}. The polarity score is a float within the range  \verb{[-1, 1]},
where -1 is for very negative sentiment, +1 is for very  positive
sentiment, and 0 is for neutral sentiment. The subjectivity is a float
within the range \verb{[0, 1]}, where 0 is very objective and 1 is very
subjective. \cr\cr
\code{vaderSentiment} assigns to the given text three sentiment proportions
(positive, negative and neutral) whose scores sum to 1. It also
calculates a compound score that is a float in \verb{[-1, 1]}, similar to
\code{TextBlob}'s polarity.
}
\examples{
sentiments <- pxtextmineR::text_data \%>\%
  dplyr::select(feedback) \%>\%
  pxtextmineR::sentiment_scores_r()

head(sentiments)
apply(sentiments, 2, range)
}
